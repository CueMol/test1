name: Build

on:
  issue_comment:
    types: [created, edited, deleted]
    
  # pull_request:
  #   types: [opened]
  #    types: [assigned, opened, synchronize, reopened, labeled, unlabeled, edited, closed, ready_for_review, locked, unlocked, review_requested, review_request_removed]

jobs:
 job01:
    if: contains(github.event.comment.html_url, '/pull/') && contains(github.event.comment.body, 'commenttest')
    runs-on: [ubuntu-latest]
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: get pullrequest url
        run: |
          echo ${{ github.event.issue.pull_request.url }}
      - name: get upstream branch
        id: upstreambranch
        run: |
          echo "::set-output name=branchname::$(curl -v -H 'Accept: application/vnd.github.sailor-v-preview+json' -u ${{ secrets.PAT }} ${{ github.event.issue.pull_request.url }} | jq '.head.ref' | sed 's/\"//g')"
      - name: echo upstream branch
        run: |
          echo ${{ steps.upstreambranch.outputs.branchname }}
      - name: Checkout upstream repo
        uses: actions/checkout@v2
        with:
           ref: ${{ steps.upstreambranch.outputs.branchname }}

#   build:
#     name: "Windows Latest MSVC"
#     runs-on: windows-latest
#     steps:
#     - uses: khan/pull-request-comment-trigger@master
#       id: check
#       env:
#         GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
#       with:
#         trigger: '@deploy'
#         reaction: rocket

#     - uses: actions/checkout@v1

#     - name: Build
#       id: build
#       shell: bash
#       run: |
#         echo "github.ref: ${{ github.ref }}"
#         mkdir build
#         cd build
#         cmake .. -G "Visual Studio 16 2019" -A x64
#         cmake --build . --config Release
#         tar czvf my-artifact.tar.gz Release
#         ls -la

# # zip --junk-paths my-artifact Release

#   release:
#     name: "Release MSVC"
#     if: contains(github.ref, 'tags/v')
#     runs-on: windows-latest
#     needs: build

#     steps:
#     - name: Create Release
#       id: create_release
#       uses: actions/create-release@v1.0.0
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         tag_name: ${{ github.ref }}
#         release_name: Release ${{ github.ref }}
#         draft: false
#         prerelease: false

#     - name: ShowFile
#       id: show_file
#       shell: bash
#       run: |
#         ls -l
#         ls -l build

#     - name: Upload Release Asset
#       id: upload-release-asset 
#       uses: actions/upload-release-asset@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         upload_url: ${{ steps.create_release.outputs.upload_url }}
#         asset_path: ./build/my-artifact.tar.gz
#         asset_name: my-artifact.tar.gz
#         asset_content_type: application/zip


#     # - name: Store Release url
#     #   run: |
#     #     echo "${{ steps.create_release.outputs.upload_url }}"
#     #     echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

#     # - uses: actions/upload-artifact@v1
#     #   with:
#     #     path: ./upload_url
#     #     name: upload_url
